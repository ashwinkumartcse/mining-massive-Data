{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "KMeansIRIS_PySpark.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JpNw-NmedS4i",
        "colab_type": "text"
      },
      "source": [
        "# 1) Plot Iris Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_gwAEH5GdJRw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "db5f4181-88d0-4adf-c433-4d1aab623038"
      },
      "source": [
        "# Load the data\n",
        "from sklearn.datasets import load_iris\n",
        "iris = load_iris()\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "# The indices of the features that we are plotting\n",
        "x_index = 0\n",
        "y_index = 1\n",
        "\n",
        "# this formatter will label the colorbar with the correct target names\n",
        "formatter = plt.FuncFormatter(lambda i, *args: iris.target_names[int(i)])\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "plt.scatter(iris.data[:, x_index], iris.data[:, y_index], c=iris.target)\n",
        "plt.colorbar(ticks=[0, 1, 2], format=formatter)\n",
        "plt.xlabel(iris.feature_names[x_index])\n",
        "plt.ylabel(iris.feature_names[y_index])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zg6XOuxyhOu2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "7f350e76-e97f-4e8f-f7f4-6d9225a53342"
      },
      "source": [
        "# The indices of the features that we are plotting\n",
        "x_index = 2\n",
        "y_index = 3\n",
        "\n",
        "# this formatter will label the colorbar with the correct target names\n",
        "formatter = plt.FuncFormatter(lambda i, *args: iris.target_names[int(i)])\n",
        "\n",
        "plt.figure(figsize=(5, 4))\n",
        "plt.scatter(iris.data[:, x_index], iris.data[:, y_index], c=iris.target)\n",
        "plt.colorbar(ticks=[0, 1, 2], format=formatter)\n",
        "plt.xlabel(iris.feature_names[x_index])\n",
        "plt.ylabel(iris.feature_names[y_index])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5GNYpQYGlDkW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 870
        },
        "outputId": "f795039a-7980-4ec1-a3bf-fec4e2913615"
      },
      "source": [
        "# Installation of pyspark \n",
        "!pip install pyspark\n",
        "!pip install -U -q PyDrive\n",
        "!apt install openjdk-8-jdk-headless -qq\n",
        "import os\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\""
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pyspark\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9a/5a/271c416c1c2185b6cb0151b29a91fff6fcaed80173c8584ff6d20e46b465/pyspark-2.4.5.tar.gz (217.8MB)\n",
            "\u001b[K     |████████████████████████████████| 217.8MB 61kB/s \n",
            "\u001b[?25hCollecting py4j==0.10.7\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e3/53/c737818eb9a7dc32a7cd4f1396e787bd94200c3997c72c1dbe028587bd76/py4j-0.10.7-py2.py3-none-any.whl (197kB)\n",
            "\u001b[K     |████████████████████████████████| 204kB 45.7MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-2.4.5-py2.py3-none-any.whl size=218257927 sha256=fcf4380cc3889c42bc7f6b7bceabc946df7a7054f6b80f16d4733c27bf7393cc\n",
            "  Stored in directory: /root/.cache/pip/wheels/bf/db/04/61d66a5939364e756eb1c1be4ec5bdce6e04047fc7929a3c3c\n",
            "Successfully built pyspark\n",
            "Installing collected packages: py4j, pyspark\n",
            "Successfully installed py4j-0.10.7 pyspark-2.4.5\n",
            "The following additional packages will be installed:\n",
            "  openjdk-8-jre-headless\n",
            "Suggested packages:\n",
            "  openjdk-8-demo openjdk-8-source libnss-mdns fonts-dejavu-extra\n",
            "  fonts-ipafont-gothic fonts-ipafont-mincho fonts-wqy-microhei\n",
            "  fonts-wqy-zenhei fonts-indic\n",
            "The following NEW packages will be installed:\n",
            "  openjdk-8-jdk-headless openjdk-8-jre-headless\n",
            "0 upgraded, 2 newly installed, 0 to remove and 29 not upgraded.\n",
            "Need to get 35.8 MB of archives.\n",
            "After this operation, 140 MB of additional disk space will be used.\n",
            "Selecting previously unselected package openjdk-8-jre-headless:amd64.\n",
            "(Reading database ... 144429 files and directories currently installed.)\n",
            "Preparing to unpack .../openjdk-8-jre-headless_8u252-b09-1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre-headless:amd64 (8u252-b09-1~18.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk-headless:amd64.\n",
            "Preparing to unpack .../openjdk-8-jdk-headless_8u252-b09-1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk-headless:amd64 (8u252-b09-1~18.04) ...\n",
            "Setting up openjdk-8-jre-headless:amd64 (8u252-b09-1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\n",
            "Setting up openjdk-8-jdk-headless:amd64 (8u252-b09-1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H4Xhmm2zlKtx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "ea513a12-71bd-42fe-e44f-1915dac5b19f"
      },
      "source": [
        "# for printing data\n",
        "from __future__ import print_function\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "# for plots\n",
        "import matplotlib.pyplot as plt\n",
        "# for 3D plots of the data\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "# for dataset generation\n",
        "from sklearn.datasets.samples_generator import make_blobs\n",
        "# spark context\n",
        "import pyspark\n",
        "from pyspark import SparkContext\n",
        "# for k-means clusteringg\n",
        "from pyspark.ml.clustering import KMeans\n",
        "# for storing of  all features as an array of floats\n",
        "from pyspark.ml.feature import VectorAssembler\n",
        "from pyspark.sql import SQLContext\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "# pyspark version\n",
        "print (pyspark.__version__)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.4.5\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.datasets.samples_generator module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.datasets. Anything that cannot be imported from sklearn.datasets is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OXfw95Wwh0NB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "outputId": "71308f64-53fc-41e8-8b73-ddcd0ae25f84"
      },
      "source": [
        "#iris data\n",
        "df_iris = pd.DataFrame(data=iris.data,columns=iris.feature_names)\n",
        "df_iris['id'] = 'row'+df_iris.index.astype(str)\n",
        "df_iris.head()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>row0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>row1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>row2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>row3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>row4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   sepal length (cm)  sepal width (cm)  ...  petal width (cm)    id\n",
              "0                5.1               3.5  ...               0.2  row0\n",
              "1                4.9               3.0  ...               0.2  row1\n",
              "2                4.7               3.2  ...               0.2  row2\n",
              "3                4.6               3.1  ...               0.2  row3\n",
              "4                5.0               3.6  ...               0.2  row4\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NnTfPg9Whark",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Save the ndarray as a csv file. please check the input.csv file is avaliable in the left side --> File panel\n",
        "df_iris.to_csv('/content/sample_data/iris1.csv', index=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tjUCGQyAmCEc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Initilization of sparkcontext. it should be executed only one time in the program\n",
        "sc = SparkContext(appName=\"PythonKMeansOnIris\") \n",
        "sqlContext = SQLContext(sc)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GthHr5vSmOVY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "FEATURES_COL = iris.feature_names\n",
        "path = '/content/sample_data/iris1.csv'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dwCo2c4qnRZ2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "9300d846-b48a-44ef-dac7-229bb6291a14"
      },
      "source": [
        "df1 = sqlContext.read.csv(path, header=True) # requires spark 2.0\n",
        "df1.show()"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "|sepal length (cm)|sepal width (cm)|petal length (cm)|petal width (cm)|   id|\n",
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "|              5.1|             3.5|              1.4|             0.2| row0|\n",
            "|              4.9|             3.0|              1.4|             0.2| row1|\n",
            "|              4.7|             3.2|              1.3|             0.2| row2|\n",
            "|              4.6|             3.1|              1.5|             0.2| row3|\n",
            "|              5.0|             3.6|              1.4|             0.2| row4|\n",
            "|              5.4|             3.9|              1.7|             0.4| row5|\n",
            "|              4.6|             3.4|              1.4|             0.3| row6|\n",
            "|              5.0|             3.4|              1.5|             0.2| row7|\n",
            "|              4.4|             2.9|              1.4|             0.2| row8|\n",
            "|              4.9|             3.1|              1.5|             0.1| row9|\n",
            "|              5.4|             3.7|              1.5|             0.2|row10|\n",
            "|              4.8|             3.4|              1.6|             0.2|row11|\n",
            "|              4.8|             3.0|              1.4|             0.1|row12|\n",
            "|              4.3|             3.0|              1.1|             0.1|row13|\n",
            "|              5.8|             4.0|              1.2|             0.2|row14|\n",
            "|              5.7|             4.4|              1.5|             0.4|row15|\n",
            "|              5.4|             3.9|              1.3|             0.4|row16|\n",
            "|              5.1|             3.5|              1.4|             0.3|row17|\n",
            "|              5.7|             3.8|              1.7|             0.3|row18|\n",
            "|              5.1|             3.8|              1.5|             0.3|row19|\n",
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FZJbLFd-5uVq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# converting the datat to spark DataFrame\n",
        "l = iris.feature_names\n",
        "l.pop(l.index('id'))\n",
        "print(iris.feature_names)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "At4QUmaMrGYk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "fc28b10f-5ff1-433c-80dc-463b54a9212a"
      },
      "source": [
        "Df = df1.toDF(*l)\n",
        "print (Df)\n",
        "Df.show()"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "DataFrame[sepal length (cm): string, sepal width (cm): string, petal length (cm): string, petal width (cm): string, id: string]\n",
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "|sepal length (cm)|sepal width (cm)|petal length (cm)|petal width (cm)|   id|\n",
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "|              5.1|             3.5|              1.4|             0.2| row0|\n",
            "|              4.9|             3.0|              1.4|             0.2| row1|\n",
            "|              4.7|             3.2|              1.3|             0.2| row2|\n",
            "|              4.6|             3.1|              1.5|             0.2| row3|\n",
            "|              5.0|             3.6|              1.4|             0.2| row4|\n",
            "|              5.4|             3.9|              1.7|             0.4| row5|\n",
            "|              4.6|             3.4|              1.4|             0.3| row6|\n",
            "|              5.0|             3.4|              1.5|             0.2| row7|\n",
            "|              4.4|             2.9|              1.4|             0.2| row8|\n",
            "|              4.9|             3.1|              1.5|             0.1| row9|\n",
            "|              5.4|             3.7|              1.5|             0.2|row10|\n",
            "|              4.8|             3.4|              1.6|             0.2|row11|\n",
            "|              4.8|             3.0|              1.4|             0.1|row12|\n",
            "|              4.3|             3.0|              1.1|             0.1|row13|\n",
            "|              5.8|             4.0|              1.2|             0.2|row14|\n",
            "|              5.7|             4.4|              1.5|             0.4|row15|\n",
            "|              5.4|             3.9|              1.3|             0.4|row16|\n",
            "|              5.1|             3.5|              1.4|             0.3|row17|\n",
            "|              5.7|             3.8|              1.7|             0.3|row18|\n",
            "|              5.1|             3.8|              1.5|             0.3|row19|\n",
            "+-----------------+----------------+-----------------+----------------+-----+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QMamaDum8DXL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "outputId": "7b30fa6e-fdd9-44e8-fb5d-71eead874690"
      },
      "source": [
        "iris.feature_names.pop(iris.feature_names.index('id'))\n",
        "iris.feature_names"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['sepal length (cm)',\n",
              " 'sepal width (cm)',\n",
              " 'petal length (cm)',\n",
              " 'petal width (cm)']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UUrbzr-AnXDq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Df = Df.withColumnRenamed('sepal length (cm)','sepalLength')\n",
        "Df = Df.withColumnRenamed('sepal width (cm)','sepalWidth')\n",
        "Df = Df.withColumnRenamed('petal length (cm)','petalLength')\n",
        "Df = Df.withColumnRenamed('petal width (cm)','petalWidth')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AJy_Xx5gny3D",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "ab68716c-72ab-4fbe-de4a-8a8d42c0b294"
      },
      "source": [
        "FEATURES_COL = ['sepalLength','sepalWidth','petalLength','petalWidth']\n",
        "df_num = Df.select(Df.sepalLength.cast('float'),Df.sepalWidth.cast(\"float\"),Df.petalLength.cast(\"float\"),Df.petalWidth.cast(\"float\"),Df.id.cast(\"string\"))\n",
        "df_num.show()"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----------+----------+-----------+----------+-----+\n",
            "|sepalLength|sepalWidth|petalLength|petalWidth|   id|\n",
            "+-----------+----------+-----------+----------+-----+\n",
            "|        5.1|       3.5|        1.4|       0.2| row0|\n",
            "|        4.9|       3.0|        1.4|       0.2| row1|\n",
            "|        4.7|       3.2|        1.3|       0.2| row2|\n",
            "|        4.6|       3.1|        1.5|       0.2| row3|\n",
            "|        5.0|       3.6|        1.4|       0.2| row4|\n",
            "|        5.4|       3.9|        1.7|       0.4| row5|\n",
            "|        4.6|       3.4|        1.4|       0.3| row6|\n",
            "|        5.0|       3.4|        1.5|       0.2| row7|\n",
            "|        4.4|       2.9|        1.4|       0.2| row8|\n",
            "|        4.9|       3.1|        1.5|       0.1| row9|\n",
            "|        5.4|       3.7|        1.5|       0.2|row10|\n",
            "|        4.8|       3.4|        1.6|       0.2|row11|\n",
            "|        4.8|       3.0|        1.4|       0.1|row12|\n",
            "|        4.3|       3.0|        1.1|       0.1|row13|\n",
            "|        5.8|       4.0|        1.2|       0.2|row14|\n",
            "|        5.7|       4.4|        1.5|       0.4|row15|\n",
            "|        5.4|       3.9|        1.3|       0.4|row16|\n",
            "|        5.1|       3.5|        1.4|       0.3|row17|\n",
            "|        5.7|       3.8|        1.7|       0.3|row18|\n",
            "|        5.1|       3.8|        1.5|       0.3|row19|\n",
            "+-----------+----------+-----------+----------+-----+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R-HOsUVesNYs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "a93c6a73-00ee-4725-e229-21a3bae22cd6"
      },
      "source": [
        "#Create a features column to be used in the clustering. \n",
        "#It need to store all features as an array of floats\n",
        "# it store the resultant array as a column called \"features\". \n",
        "vecAssembler = VectorAssembler(inputCols=FEATURES_COL, outputCol=\"features\")\n",
        "df_kmeans = vecAssembler.transform(df_num).select('id', 'features')\n",
        "df_kmeans.show()"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----+--------------------+\n",
            "|   id|            features|\n",
            "+-----+--------------------+\n",
            "| row0|[5.09999990463256...|\n",
            "| row1|[4.90000009536743...|\n",
            "| row2|[4.69999980926513...|\n",
            "| row3|[4.59999990463256...|\n",
            "| row4|[5.0,3.5999999046...|\n",
            "| row5|[5.40000009536743...|\n",
            "| row6|[4.59999990463256...|\n",
            "| row7|[5.0,3.4000000953...|\n",
            "| row8|[4.40000009536743...|\n",
            "| row9|[4.90000009536743...|\n",
            "|row10|[5.40000009536743...|\n",
            "|row11|[4.80000019073486...|\n",
            "|row12|[4.80000019073486...|\n",
            "|row13|[4.30000019073486...|\n",
            "|row14|[5.80000019073486...|\n",
            "|row15|[5.69999980926513...|\n",
            "|row16|[5.40000009536743...|\n",
            "|row17|[5.09999990463256...|\n",
            "|row18|[5.69999980926513...|\n",
            "|row19|[5.09999990463256...|\n",
            "+-----+--------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Liwr77yiIqY2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#To optimize k we cluster a fraction of the data for different choices of k and look for an \"elbow\" in the cost function.\n",
        "cost = np.zeros(20)\n",
        "for k in range(2,20):\n",
        "    kmeans = KMeans().setK(k).setSeed(1).setFeaturesCol(\"features\")\n",
        "    model = kmeans.fit(df_kmeans.sample(False,0.1, seed=42))\n",
        "    cost[k] = model.computeCost(df_kmeans)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iSkKZ_84KEbz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "outputId": "385525b5-d24a-4955-ddf5-3ed140711d57"
      },
      "source": [
        "fig, ax = plt.subplots(1,1, figsize =(8,6))\n",
        "ax.plot(range(2,20),cost[2:20])\n",
        "ax.set_xlabel('k')\n",
        "ax.set_ylabel('cost')"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'cost')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oypueBvJKVI-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "outputId": "047e14df-585c-4a6b-fda2-11c05590504f"
      },
      "source": [
        "#Train the machine learning model\n",
        "k = 10\n",
        "kmeans = KMeans().setK(k).setSeed(1).setFeaturesCol(\"features\")\n",
        "model = kmeans.fit(df_kmeans)\n",
        "centers = model.clusterCenters()\n",
        "\n",
        "print(\"Cluster Centers: \")\n",
        "for center in centers:\n",
        "    print(center)"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cluster Centers: \n",
            "[4.7045455  3.12272727 1.41363635 0.2       ]\n",
            "[7.53999991 3.14999998 6.38999996 2.08999997]\n",
            "[5.         2.30000001 3.27499998 1.02500001]\n",
            "[5.24285712 3.66785715 1.5        0.28214286]\n",
            "[6.60800001 3.064      5.55199999 2.12799997]\n",
            "[6.63333333 3.03333332 4.63333333 1.45833332]\n",
            "[5.75000005 2.82       4.93000002 1.90999999]\n",
            "[6.18333336 2.58333333 4.89166665 1.53333332]\n",
            "[5.78666658 2.92000001 4.31999995 1.36666665]\n",
            "[5.625      2.54166669 3.86666667 1.15833333]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zyRMlY3tKYqS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6f628697-0b6e-445c-a9b1-11eb19517f19"
      },
      "source": [
        "#assigning the individual rows to the nearest cluster centroid\n",
        "transformed = model.transform(df_kmeans).select('id', 'prediction')\n",
        "rows = transformed.collect()\n",
        "print(rows[:3])"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Row(id='row0', prediction=3), Row(id='row1', prediction=0), Row(id='row2', prediction=0)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Syq8vGngKn3y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "c039b5a9-a3ab-4d5f-926e-ef6e4c172a3e"
      },
      "source": [
        "#From the rows returned by the collect method it is trivial to create a new dataframe using our SQL context.\n",
        "df_pred = sqlContext.createDataFrame(rows)\n",
        "df_pred.show()"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----+----------+\n",
            "|   id|prediction|\n",
            "+-----+----------+\n",
            "| row0|         3|\n",
            "| row1|         0|\n",
            "| row2|         0|\n",
            "| row3|         0|\n",
            "| row4|         3|\n",
            "| row5|         3|\n",
            "| row6|         0|\n",
            "| row7|         3|\n",
            "| row8|         0|\n",
            "| row9|         0|\n",
            "|row10|         3|\n",
            "|row11|         0|\n",
            "|row12|         0|\n",
            "|row13|         0|\n",
            "|row14|         3|\n",
            "|row15|         3|\n",
            "|row16|         3|\n",
            "|row17|         3|\n",
            "|row18|         3|\n",
            "|row19|         3|\n",
            "+-----+----------+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZvHczgxBKqRS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "ce994133-c964-4e69-a875-d6fed21f7a21"
      },
      "source": [
        "#Join the prediction with the original data\n",
        "df_pred = df_pred.join(Df, 'id')\n",
        "df_pred.show()"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----+----------+-----------+----------+-----------+----------+\n",
            "|   id|prediction|sepalLength|sepalWidth|petalLength|petalWidth|\n",
            "+-----+----------+-----------+----------+-----------+----------+\n",
            "| row0|         3|        5.1|       3.5|        1.4|       0.2|\n",
            "| row1|         0|        4.9|       3.0|        1.4|       0.2|\n",
            "| row2|         0|        4.7|       3.2|        1.3|       0.2|\n",
            "| row3|         0|        4.6|       3.1|        1.5|       0.2|\n",
            "| row4|         3|        5.0|       3.6|        1.4|       0.2|\n",
            "| row5|         3|        5.4|       3.9|        1.7|       0.4|\n",
            "| row6|         0|        4.6|       3.4|        1.4|       0.3|\n",
            "| row7|         3|        5.0|       3.4|        1.5|       0.2|\n",
            "| row8|         0|        4.4|       2.9|        1.4|       0.2|\n",
            "| row9|         0|        4.9|       3.1|        1.5|       0.1|\n",
            "|row10|         3|        5.4|       3.7|        1.5|       0.2|\n",
            "|row11|         0|        4.8|       3.4|        1.6|       0.2|\n",
            "|row12|         0|        4.8|       3.0|        1.4|       0.1|\n",
            "|row13|         0|        4.3|       3.0|        1.1|       0.1|\n",
            "|row14|         3|        5.8|       4.0|        1.2|       0.2|\n",
            "|row15|         3|        5.7|       4.4|        1.5|       0.4|\n",
            "|row16|         3|        5.4|       3.9|        1.3|       0.4|\n",
            "|row17|         3|        5.1|       3.5|        1.4|       0.3|\n",
            "|row18|         3|        5.7|       3.8|        1.7|       0.3|\n",
            "|row19|         3|        5.1|       3.8|        1.5|       0.3|\n",
            "+-----+----------+-----------+----------+-----------+----------+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TkflJ6UyLLx1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "outputId": "50556916-2dbe-4241-adaa-faa5c497512b"
      },
      "source": [
        "#Convert to Pandas dataframe\n",
        "pddf_pred = df_pred.toPandas().set_index('id')\n",
        "pddf_pred.head()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prediction</th>\n",
              "      <th>sepalLength</th>\n",
              "      <th>sepalWidth</th>\n",
              "      <th>petalLength</th>\n",
              "      <th>petalWidth</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>3</td>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>0</td>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>0</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      prediction sepalLength sepalWidth petalLength petalWidth\n",
              "id                                                            \n",
              "row0           3         5.1        3.5         1.4        0.2\n",
              "row1           0         4.9        3.0         1.4        0.2\n",
              "row2           0         4.7        3.2         1.3        0.2\n",
              "row3           0         4.6        3.1         1.5        0.2\n",
              "row4           3         5.0        3.6         1.4        0.2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "59ZzsfD2c0mJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "5a1a85a9-cdd5-4453-e562-7c2ae9e195ad"
      },
      "source": [
        "import seaborn as sn\n",
        "confusion_matrix = pd.crosstab(iris.target, pddf_pred['prediction'], rownames=['Actual'], colnames=['Predicted'])\n",
        "print(confusion_matrix)\n",
        "sn.heatmap(confusion_matrix, annot=True)\n",
        "plt.show()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Predicted   0   1  2   3   4   5  6  7   8   9\n",
            "Actual                                        \n",
            "0          22   0  0  28   0   0  0  0   0   0\n",
            "1           0   0  4   0   0  12  1  6  15  12\n",
            "2           0  10  0   0  25   0  9  6   0   0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}